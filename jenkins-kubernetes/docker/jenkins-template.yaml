# Jenkins Configuration as Code
# Author: Andrew Jarombek
# Date: 6/7/2020

jenkins:
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "Overall/Administer:andy"
        - "Job/Discover:guest"
        - "Job/Read:guest"
        - "Job/Workspace:guest"
        - "View/Read:guest"
  clouds:
    - kubernetes:
        name: kubernetes
        serverUrl: ${KUBERNETES_URL}
        namespace: jenkins
        jenkinsUrl: "http://jenkins-jnlp-service/"
        connectTimeout: 5
        containerCapStr: 10
        readTimeout: 15
  numExecutors: 4
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: andy
          name: andy
          password: ${JENKINS_PASSWORD}
        - id: guest
          name: guest
          password: guest
  systemMessage: "Andrew Jarombek's Jenkins Server"
credentials:
  system:
    domainCredentials:
      - credentials:
        - basicSSHUserPrivateKey:
            scope: GLOBAL
            id: "ajarombek-github"
            username: ajarombek-github
            description: "AJarombek GitHub Key"
            privateKeySource:
              directEntry:
                privateKey: ${SSH_PRIVATE_KEY}
        - usernamePassword:
            scope: GLOBAL
            id: "ajarombek-docker-hub"
            username: ${DOCKER_HUB_USERNAME}
            password: ${DOCKER_HUB_PASSWORD}
            description: "DockerHub Account Credentials"
        - string:
            scope: GLOBAL
            id: "ajarombek-github-access-token"
            secret: ${GITHUB_ACCESS_TOKEN}
            description: "AJarombek GitHub Access Token"
        - usernamePassword:
            scope: GLOBAL
            id: "saintsxctf-rds-dev"
            username: ${SAINTSXCTF_RDS_DEV_USERNAME}
            password: ${SAINTSXCTF_RDS_DEV_PASSWORD}
            description: "SaintsXCTF RDS Development Credentials"
        - usernamePassword:
            scope: GLOBAL
            id: "saintsxctf-rds-prod"
            username: ${SAINTSXCTF_RDS_PROD_USERNAME}
            password: ${SAINTSXCTF_RDS_PROD_PASSWORD}
            description: "SaintsXCTF RDS Production Credentials"
        - usernamePassword:
            scope: GLOBAL
            id: "saintsxctf-andy"
            username: "andy"
            password: ${SAINTSXCTF_PASSWORD}
            description: "SaintsXCTF Andy Password"
        - string:
            scope: GLOBAL
            id: "aws-access-key-id"
            secret: ${AWS_ACCESS_KEY_ID}
            description: "AWS Access Key ID Used with the CLI and SDK"
        - string:
            scope: GLOBAL
            id: "aws-secret-access-key"
            secret: ${AWS_SECRET_ACCESS_KEY}
            description: "AWS Secret Access Key Used with the CLI and SDK"
unclassified:
  globalLibraries:
    libraries:
      - name: "global-jenkins-library"
        allowVersionOverride: true
        defaultVersion: "master"
        implicit: false
        includeInChangesets: true
        retriever:
          modernSCM:
            scm:
              git:
                id: "global-jenkins-library"
                remote: "git@github.com:AJarombek/global-jenkins-library.git"
                credentialsId: "ajarombek-github"
  email-ext:
    mailAccount:
      smtpHost: smtp.gmail.com
      smtpPort: 465
      smtpUsername: andrew@jarombek.com
      smtpPassword: ${GOOGLE_ACCOUNT_PASSWORD}
      useSsl: true
    charset: UTF-8
    defaultSuffix: "@jarombek.com"
    defaultContentType: text/html
    defaultSubject: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!"
    defaultBody: >
        $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:

        Check console output at $BUILD_URL to view the results.
    debugMode: true
  mailer:
    smtpHost: smtp.gmail.com
    smtpPort: 465
    useSsl: true
    charset: UTF-8
    defaultSuffix: "@jarombek.com"
    authentication:
      username: andrew@jarombek.com
      password: ${GOOGLE_ACCOUNT_PASSWORD}
jobs:
  - script: >
      job("single-seed-job") {
          description("Freestyle Job that builds a single other job")
          parameters {
              stringParam("repository", "global-jenkins-jobs", "Repository containing the Job DSL script")
              stringParam("branch", "master", "Repo branch containing the Job DSL script")
              stringParam("job_dsl_path", "", "Location of Job DSL script")
          }
          concurrentBuild(true)
          scm {
              git {
                  branch("\$branch")
                  remote {
                      credentials("ajarombek-github")
                      github("AJarombek/\$repository", "ssh", "github.com")
                  }
              }
          }
          steps {
              dsl {
                  external("\$job_dsl_path")
              }
          }
      }
  - script: >
      job("seed-job") {
          description("Freestyle Job that builds other jobs")
          parameters {
              stringParam("repository", "global-jenkins-jobs", "Repository containing the Job DSL scripts")
              stringParam("branch", "master", "Repo branch containing the Job DSL scripts")
          }
          concurrentBuild(false)
          scm {
              git {
                  branch("\$branch")
                  remote {
                      credentials("ajarombek-github")
                      github("AJarombek/\$repository", "ssh", "github.com")
                  }
              }
          }
          steps {
              dsl {
                  external("**/job_dsl.groovy")
              }
          }
      }
  - script: >
      pipelineJob("init") {
          description("Pipeline Job for initializing the Jenkins server")
          definition {
              cpsScm {
                  scm {
                      git {
                          branch("master")
                          remote {
                              credentials("ajarombek-github")
                              github("AJarombek/global-jenkins-jobs", "ssh", "github.com")
                          }
                      }
                      scriptPath("bootstrap/init/Jenkinsfile.groovy")
                  }
              }
          }
      }
  - script: >
      pipelineJob("set-folders") {
          description("Pipeline Job for setting the folder structure of the Jenkins server")
          definition {
              cpsScm {
                  scm {
                      git {
                          branch("master")
                          remote {
                              credentials("ajarombek-github")
                              github("AJarombek/global-jenkins-jobs", "ssh", "github.com")
                          }
                      }
                      scriptPath("bootstrap/set-folders/Jenkinsfile.groovy")
                  }
              }
          }
      }