# Jenkins Configuration as Code
# Author: Andrew Jarombek
# Date: 6/7/2020

jenkins:
  authorizationStrategy:
    globalMatrix:
      permissions:
        - "Overall/Administer:andy"
        - "Credentials/View:guest"
        - "Agent/Build:guest"
        - "Job/Build:guest"
        - "Job/Cancel:guest"
        - "Job/Create:guest"
        - "Job/Discover:guest"
        - "Job/Read:guest"
        - "Job/Workspace:guest"
        - "Run/Replay:guest"
        - "View/Read:guest"
        - "View/Create:guest"
  clouds:
    - kubernetes:
        name: kubernetes
        serverUrl: ${KUBERNETES_URL}
        namespace: jenkins
        jenkinsUrl: "https://jenkins.jarombek.io"
        connectTimeout: 5
        containerCapStr: 10
        readTimeout: 15
        podLabels:
          - "app.kubernetes.io/managed-by=jenkins"
  numExecutors: 2
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: andy
          name: andy
          password: ${JENKINS_PASSWORD}
        - id: guest
          name: guest
          password: guest
  systemMessage: "Andrew Jarombek's Jenkins Server"
credentials:
  system:
    domainCredentials:
      - credentials:
        - basicSSHUserPrivateKey:
            scope: GLOBAL
            id: "ajarombek-github"
            username: ajarombek-github
            description: "AJarombek GitHub Key"
            privateKeySource:
              directEntry:
                privateKey: ${SSH_PRIVATE_KEY}
        - usernamePassword:
            scope: GLOBAL
            id: "ajarombek-docker-hub"
            username: ${DOCKER_HUB_USERNAME}
            password: ${DOCKER_HUB_PASSWORD}
            description: "DockerHub Account Credentials"
unclassified:
  globalLibraries:
    libraries:
      - name: "global-jenkins-library"
        allowVersionOverride: true
        defaultVersion: "master"
        implicit: false
        includeInChangesets: true
        retriever:
          modernSCM:
            scm:
              git:
                id: "global-jenkins-library"
                remote: "git@github.com:AJarombek/global-jenkins-library.git"
                credentialsId: "ajarombek-github"
  extendedEmailPublisher:
    smtpServer: smtp.gmail.com
    smtpPort: 465
    smtpUsername: andrew@jarombek.com
    smtpPassword: ${GOOGLE_ACCOUNT_PASSWORD}
    useSsl: true
    charset: UTF-8
    defaultSuffix: "@jarombek.com"
    defaultContentType: text/html
    defaultSubject: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!"
    defaultBody: >
        $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:

        Check console output at $BUILD_URL to view the results.
    debugMode: true
  mailer:
    smtpHost: smtp.gmail.com
    smtpPort: 465
    useSsl: true
    charset: UTF-8
    defaultSuffix: "@jarombek.com"
    authentication:
      username: andrew@jarombek.com
      password: ${GOOGLE_ACCOUNT_PASSWORD}
jobs:
  - script: >
      job("single-seed-job") {
          description("Freestyle Job that builds a single other job")
          parameters {
              stringParam("repository", "global-jenkins-jobs", "Repository containing the Job DSL script")
              stringParam("branch", "master", "Repo branch containing the Job DSL script")
              stringParam("job_dsl_path", "", "Location of Job DSL script")
          }
          concurrentBuild(true)
          scm {
              git {
                  branch("\$branch")
                  remote {
                      credentials("ajarombek-github")
                      github("AJarombek/\$repository", "ssh", "github.com")
                  }
              }
          }
          steps {
              dsl {
                  external("\$job_dsl_path")
              }
          }
      }
  - script: >
      job("seed-job") {
          description("Freestyle Job that builds other jobs")
          parameters {
              stringParam("repository", "global-jenkins-jobs", "Repository containing the Job DSL scripts")
              stringParam("branch", "master", "Repo branch containing the Job DSL scripts")
          }
          concurrentBuild(false)
          scm {
              git {
                  branch("\$branch")
                  remote {
                      credentials("ajarombek-github")
                      github("AJarombek/\$repository", "ssh", "github.com")
                  }
              }
          }
          steps {
              dsl {
                  external("**/job_dsl.groovy")
              }
          }
      }
  - script: >
      pipelineJob("init") {
          description("Pipeline Job for initializing the Jenkins server")
          definition {
              cpsScm {
                  scm {
                      git {
                          branch("master")
                          remote {
                              credentials("ajarombek-github")
                              github("AJarombek/global-jenkins-jobs", "ssh", "github.com")
                          }
                      }
                      scriptPath("bootstrap/init/Jenkinsfile.groovy")
                  }
              }
          }
      }
  - script: >
        folder('global-aws') {
            displayName('global-aws')
            description('Folder for global AWS infrastructure jobs.')
            primaryView('All')
            authorization {
                permissions('andy', [
                    'hudson.model.Item.Create',
                    'hudson.model.Item.Discover'
                ])
                permission('hudson.model.Item.Discover', 'guest')
            }
            views {
                listView('Continuous Integration') {
                    description('Continuous Integration jobs for the Global AWS Infrastructure')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('global-aws-infrastructure-test')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
                listView('Continuous Deployment') {
                    description('Continuous Deployment jobs for the Global AWS Infrastructure')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('push-jenkins-ecr-docker-image')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        }
  - script: >
        folder('infrastructure') {
            displayName('infrastructure')
            description('Folder for infrastructure automation jobs.')
            primaryView('All')
            authorization {
                permissions('andy', [
                    'hudson.model.Item.Create',
                    'hudson.model.Item.Discover'
                ])
                permission('hudson.model.Item.Discover', 'guest')
            }
            views {
                listView('Terraform') {
                    description('Terraform jobs used globally for IaC')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('terraform-apply', 'terraform-destroy')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
                listView('Packer') {
                    description('Packer jobs used globally for building AMIs for AWS')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('bake-ami')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        }
  - script: >
        folder('jarombek-com') {
            displayName('jarombek-com')
            description('Folder for the jarombek.com application')
        }
  - script: >
        folder('jarombek-com/components') {
            displayName('components')
            description('Folder for the Jarombek reusable component library')
            primaryView('All')
            authorization {
                permissions('andy', [
                    'hudson.model.Item.Create',
                    'hudson.model.Item.Discover'
                ])
                permission('hudson.model.Item.Discover', 'guest')
            }
            views {
                listView('Continuous Integration') {
                    description('Continuous Integration jobs for the Jarombek reusable component library')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('jarombek-react-components-test')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        }
  - script: >
        folder('jarombek-com/infrastructure') {
            displayName('infrastructure')
            description('Folder for the jarombek.com AWS infrastructure')
            primaryView('All')
            authorization {
                permissions('andy', [
                    'hudson.model.Item.Create',
                    'hudson.model.Item.Discover'
                ])
                permission('hudson.model.Item.Discover', 'guest')
            }
            views {
                listView('Continuous Integration') {
                    description('Continuous Integration jobs for the jarombek.com AWS infrastructure')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('jarombek-com-infrastructure-test')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        }
  - script: >
        folder('jarombek-com/web') {
            displayName('web')
            description('Folder for the jarombek.com web application')
            primaryView('All')
            authorization {
                permissions('andy', [
                    'hudson.model.Item.Create',
                    'hudson.model.Item.Discover'
                ])
                permission('hudson.model.Item.Discover', 'guest')
            }
            views {
                listView('Continuous Integration') {
                    description('Continuous Integration jobs for the jarombek.com web application')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('jarombek-com-test')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        }
  - script: >
        folder('prototypes') {
            displayName('prototypes')
            description('Folder for prototype applications')
            primaryView('All')
            authorization {
                permissions('andy', [
                    'hudson.model.Item.Create',
                    'hudson.model.Item.Discover'
                ])
                permission('hudson.model.Item.Discover', 'guest')
            }
            views {
                listView('Continuous Integration') {
                    description('Continuous Integration jobs for prototypes')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names(
                            'graphql-react-prototype-test',
                            'react-16-3-demo-test',
                            'react-webpack-seed',
                            'kubernetes-prototype-ci'
                        )
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
                listView('Continuous Deployment') {
                    description('Continuous Deployment jobs for prototypes')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names(
                            'cloudformation-serverless',
                            'kubernetes-prototype-infra',
                            'kubernetes-prototype-safeguard'
                        )
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        }
  - script: >
        folder('saints-xctf') {
            displayName('saints-xctf')
            description('Folder for the SaintsXCTF application')
        }
  - script: >
        folder('saints-xctf/api') {
            displayName('api')
            description('Folder for the SaintsXCTF API application')
            primaryView('All')
            authorization {
                permissions('andy', [
                    'hudson.model.Item.Create',
                    'hudson.model.Item.Discover'
                ])
                permission('hudson.model.Item.Discover', 'guest')
            }
            views {
                listView('Continuous Integration') {
                    description('Continuous Integration jobs for the SaintsXCTF API Application')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('saints-xctf-api-test')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        }
  - script: >
      folder('saints-xctf/auth') {
          displayName('api')
          description('Folder for the SaintsXCTF Auth application')
          primaryView('All')
          authorization {
              permissions('andy', [
                  'hudson.model.Item.Create',
                  'hudson.model.Item.Discover'
              ])
              permission('hudson.model.Item.Discover', 'guest')
          }
          views {
              listView('Continuous Deployment') {
                  description('Continuous Deployment jobs for the SaintsXCTF Auth Application')
                  filterBuildQueue()
                  filterExecutors()
                  jobs {
                      names('push-authenticate-lambda-image')
                      names('push-authorizer-lambda-image')
                      names('push-rotate-lambda-image')
                      names('push-token-lambda-image')
                  }
                  columns() {
                      status()
                      weather()
                      name()
                      lastSuccess()
                      lastFailure()
                      lastDuration()
                      buildButton()
                  }
              }
          }
      }
  - script: >
        folder('saints-xctf/infrastructure') {
            displayName('infrastructure')
            description('Folder for the SaintsXCTF Infrastructure')
            primaryView('All')
            authorization {
                permissions('andy', [
                    'hudson.model.Item.Create',
                    'hudson.model.Item.Discover'
                ])
                permission('hudson.model.Item.Discover', 'guest')
            }
            views {
                listView('Continuous Integration') {
                    description('Continuous Integration jobs for the SaintsXCTF Infrastructure')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('saints-xctf-infrastructure-dev', 'saints-xctf-infrastructure-prod')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
                listView('Continuous Deployment') {
                    description('Continuous Deployment jobs for the SaintsXCTF Infrastructure')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names(
                            'saints-xctf-rds-snapshot-lambda',
                            'deploy-all',
                            'deploy-dev',
                            'destroy-dev',
                            'deploy-bastion-dev',
                            'destroy-bastion-dev',
                            'deploy-database-dev',
                            'destroy-database-dev',
                            'deploy-database-snapshot-dev',
                            'destroy-database-snapshot-dev',
                            'deploy-saints-xctf-com-dev',
                            'destroy-saints-xctf-com-dev',
                            'deploy-saints-xctf-com-asset-dev',
                            'destroy-saints-xctf-com-asset-dev',
                            'deploy-saints-xctf-com-auth-dev',
                            'destroy-saints-xctf-com-auth-dev',
                            'deploy-saints-xctf-com-fn-dev',
                            'destroy-saints-xctf-com-fn-dev',
                            'deploy-saints-xctf-com-uasset-dev',
                            'destroy-saints-xctf-com-uasset-dev',
                            'deploy-secrets-manager-dev',
                            'destroy-secrets-manager-dev',
                        )
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        }
  - script: >
        folder('saints-xctf/web') {
            displayName('web')
            description('Folder for the SaintsXCTF web application')
            primaryView('All')
            authorization {
                permissions('andy', [
                    'hudson.model.Item.Create',
                    'hudson.model.Item.Discover'
                ])
                permission('hudson.model.Item.Discover', 'guest')
            }
            views {
                listView('Continuous Integration') {
                    description('Continuous Integration jobs for the SaintsXCTF Web Application')
                    filterBuildQueue()
                    filterExecutors()
                    jobs {
                        names('saints-xctf-web-test')
                    }
                    columns() {
                        status()
                        weather()
                        name()
                        lastSuccess()
                        lastFailure()
                        lastDuration()
                        buildButton()
                    }
                }
            }
        }